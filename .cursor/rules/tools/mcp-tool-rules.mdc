---
description: Tool implementation rules and guidelines for Model Context Protocol
globs: ["src/mcp/**/tools/**/*.ts"]
---

# MCP Tool Implementation Rules

## Tool Definition

### Basic Tool Interface
```typescript
interface Tool {
  name: string;
  description: string;
  category: ToolCategory;
  inputSchema: JSONSchema;
  outputSchema?: JSONSchema;
  execute(args: unknown): Promise<ToolResult>;
}

interface ToolResult {
  success: boolean;
  content: Array<{
    type: string;
    value: unknown;
  }>;
  metadata?: Record<string, unknown>;
}
```

### Tool Categories
```typescript
enum ToolCategory {
  Resource = 'resource',
  System = 'system',
  Integration = 'integration',
  Utility = 'utility'
}

interface ToolRegistry {
  registerTool(tool: Tool): void;
  getTool(name: string): Tool | undefined;
  listTools(category?: ToolCategory): Tool[];
}
```

## Tool Implementation

### Basic Tool Structure
```typescript
abstract class BaseTool implements Tool {
  constructor(
    public name: string,
    public description: string,
    public category: ToolCategory,
    public inputSchema: JSONSchema
  ) {}

  abstract execute(args: unknown): Promise<ToolResult>;

  protected async validateArgs(args: unknown): Promise<void> {
    const valid = await validateSchema(this.inputSchema, args);
    if (!valid) {
      throw new MCPError(
        MCPErrorCode.InvalidParams,
        'Invalid tool arguments'
      );
    }
  }
}
```

### Example Resource Tool
```typescript
class ListResourcesTool extends BaseTool {
  constructor() {
    super(
      'list-resources',
      'List available resources',
      ToolCategory.Resource,
      {
        type: 'object',
        properties: {
          pattern: {
            type: 'string',
            description: 'Resource URI pattern'
          }
        }
      }
    );
  }

  async execute(args: unknown): Promise<ToolResult> {
    await this.validateArgs(args);
    const { pattern } = args as { pattern?: string };
    
    const resources = await this.listResources(pattern);
    return {
      success: true,
      content: [{
        type: 'json',
        value: resources
      }]
    };
  }
}
```

## Tool Handler Implementation

### Handler Interface
```typescript
interface ToolHandler {
  executeTool(
    name: string,
    args: unknown
  ): Promise<ToolResult>;
  
  validateTool(
    name: string,
    args: unknown
  ): Promise<boolean>;
}

class MCPToolHandler implements ToolHandler {
  constructor(private registry: ToolRegistry) {}

  async executeTool(
    name: string,
    args: unknown
  ): Promise<ToolResult> {
    const tool = this.registry.getTool(name);
    if (!tool) {
      throw new MCPError(
        MCPErrorCode.MethodNotFound,
        `Tool not found: ${name}`
      );
    }

    try {
      return await tool.execute(args);
    } catch (error) {
      throw new MCPError(
        MCPErrorCode.ToolError,
        `Tool execution failed: ${error.message}`
      );
    }
  }
}
```

## Tool Chain Implementation

### Chain Definition
```typescript
interface ToolChain {
  steps: Array<{
    tool: string;
    args: unknown;
    condition?: (context: unknown) => boolean;
  }>;
  context?: Record<string, unknown>;
}

class ToolChainExecutor {
  async execute(chain: ToolChain): Promise<ToolResult[]> {
    const results: ToolResult[] = [];
    let context = chain.context || {};

    for (const step of chain.steps) {
      if (step.condition && !step.condition(context)) {
        continue;
      }

      const result = await this.executeStep(step, context);
      results.push(result);
      context = this.updateContext(context, result);
    }

    return results;
  }
}
```

## Best Practices

1. **Tool Design**
   - Keep tools focused and single-purpose
   - Use clear and descriptive names
   - Provide comprehensive descriptions
   - Define precise input schemas

2. **Error Handling**
   - Validate inputs thoroughly
   - Provide meaningful error messages
   - Clean up resources on failure
   - Handle timeouts appropriately

3. **Performance**
   - Implement progress reporting
   - Support cancellation
   - Cache results when appropriate
   - Use streaming for large outputs

4. **Security**
   - Validate all inputs
   - Sanitize file paths
   - Check permissions
   - Limit resource access

## Implementation Guidelines

1. **Tool Registration**
```typescript
class ToolRegistration {
  static register(registry: ToolRegistry): void {
    registry.registerTool(new ListResourcesTool());
    registry.registerTool(new ExecuteCommandTool());
    registry.registerTool(new TransformDataTool());
  }
}
```

2. **Tool Execution**
```typescript
async function executeTool(
  name: string,
  args: unknown,
  options?: ToolOptions
): Promise<ToolResult> {
  const tool = registry.getTool(name);
  if (!tool) {
    throw new Error(`Tool not found: ${name}`);
  }

  await validatePermissions(tool, options);
  return await tool.execute(args);
}
```

3. **Tool Result Handling**
```typescript
async function handleToolResult(
  result: ToolResult
): Promise<void> {
  if (!result.success) {
    throw new Error('Tool execution failed');
  }

  for (const content of result.content) {
    await processContent(content);
  }
}
``` 